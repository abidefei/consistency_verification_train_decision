Agent Environment
  Obsvars:
   Operation_Order: {none,Going_to_line1,Going_to_line3};
  end Obsvars
    --  	Block_State:{Busy,Free};
   Vars:
    	Signal_state: {Green,Red};-- The states of the light for the moving train
        Operation_state:{Operating,Operate_end};--	Operation_Order: {Going_to_line1,Going_to_line3};
   end Vars
    
    Actions = {none,keep_going,stop,operation_end};
    Protocol:
    	(Signal_state=Green): {keep_going};  
    	(Signal_state=Red): {stop};  
    	(Operation_state=Operate_end):{operation_end};        
    	Other: {none};
    end Protocol
    
    Evolution:
    	Signal_state= Green if (Operation_Order=Going_to_line3) and (Block2.Action=show_free) and
    	            (Sensor1.Action=show_normal and Sensor2.Action=show_normal and Sensor3.Action=show_normal and Sensor4.Action=show_normal
    	            and Sensor5.Action=show_normal and Sensor6.Action=show_normal and Sensor7.Action=show_normal
    	            and Sensor8.Action=show_normal and Sensor9.Action=show_normal and Sensor10.Action=show_normal
    	            and Sensor11.Action=show_normal and Sensor12.Action=show_normal and Sensor13.Action=show_normal and Sensor14.Action=show_normal
                            	            and Sensor15.Action=show_normal and Sensor16.Action=show_normal and Sensor17.Action=show_normal
                            	            and Sensor18.Action=show_normal and Sensor19.Action=show_normal and Sensor20.Action=show_normal);

    	Signal_state= Green if (Operation_Order=Going_to_line1) and (Block1.Action=show_free) and
    	       (Sensor1.Action=show_reverse or Sensor2.Action=show_reverse or Sensor3.Action=show_reverse or Sensor4.Action=show_reverse
    	       or Sensor5.Action=show_reverse or Sensor6.Action=show_reverse or Sensor7.Action=show_reverse
    	       or Sensor8.Action=show_reverse or Sensor9.Action=show_reverse or Sensor10.Action=show_reverse
    	      or Sensor11.Action=show_reverse or Sensor12.Action=show_reverse or Sensor13.Action=show_reverse or Sensor14.Action=show_reverse
                     	       or Sensor15.Action=show_reverse or Sensor16.Action=show_reverse or Sensor17.Action=show_reverse
                     	       or Sensor18.Action=show_reverse or Sensor19.Action=show_reverse or Sensor20.Action=show_reverse
    	       );
    	Signal_state= Red if (Operation_Order=Going_to_line1) and
    	             (Sensor1.Action=show_normal or Sensor2.Action=show_normal or Sensor3.Action=show_normal or Sensor4.Action=show_normal
    	             or Sensor5.Action=show_normal or Sensor6.Action=show_normal or Sensor7.Action=show_normal
    	             or Sensor8.Action=show_normal or Sensor9.Action=show_normal or Sensor10.Action=show_normal
    	           or Sensor11.Action=show_normal or Sensor12.Action=show_normal or Sensor13.Action=show_normal or Sensor14.Action=show_normal
                          	             or Sensor15.Action=show_normal or Sensor16.Action=show_normal or Sensor17.Action=show_normal
                          	             or Sensor18.Action=show_normal or Sensor19.Action=show_normal or Sensor20.Action=show_normal
    	             or Block1.Action=show_busy);
    	Signal_state= Red if (Operation_Order=Going_to_line3) and
    	             (Sensor1.Action=show_reverse or Sensor2.Action=show_reverse or Sensor3.Action=show_reverse or Sensor4.Action=show_reverse
    	             or Sensor5.Action=show_reverse or Sensor6.Action=show_reverse or Sensor7.Action=show_reverse
    	             or Sensor8.Action=show_reverse or Sensor9.Action=show_reverse or Sensor10.Action=show_reverse
    	            or Sensor11.Action=show_reverse or Sensor12.Action=show_reverse or Sensor13.Action=show_reverse or Sensor14.Action=show_reverse
                           	             or Sensor15.Action=show_reverse or Sensor16.Action=show_reverse or Sensor17.Action=show_reverse
                           	             or Sensor18.Action=show_reverse or Sensor19.Action=show_reverse or Sensor20.Action=show_reverse
    	             or Block2.Action=show_busy);

    	Signal_state=Red if Operation_Order=none or Action=none;
    	Operation_state=Operating if Action=keep_going;
    	Operation_state=Operate_end if Operation_state=Operating;
    end Evolution

end Agent

Agent Turn_out
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{normal,reverse};
    	lock_state:{locked,unlocked};
    end Vars
    Actions = {none,positive_rotation,reverse_rotation};-- The orders for switch machine ;

	Protocol:
    	(state=reverse and Environment.Operation_Order=Going_to_line3): {positive_rotation};
		(state=normal and Environment.Operation_Order=Going_to_line1): {reverse_rotation};
		Other: {none};
    end Protocol

	Evolution:
		lock_state=locked if Action=positive_rotation or Action=reverse_rotation;
		lock_state=locked if Environment.Action=keep_going;
		lock_state=unlocked if Environment.Action=operation_end;
		state=reverse if state=reverse and Action=none;
		state=reverse if Action=reverse_rotation;
		state=reverse if state=reverse and lock_state=locked;
		state=normal if state=normal and Action=none;
		state=normal if state=normal and lock_state=locked;
		state=normal if Action=positive_rotation;

    end Evolution

end Agent



Agent Sensor1
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor2
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor3
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor4
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor5
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor6
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor7
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor8
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor9
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor10
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor11
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor12
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor13
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor14
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor15
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor16
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor17
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor18
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor19
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor20
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Block1
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{busy,free};
    	train_on_block:boolean;
    end Vars
    Actions = {none,show_busy,show_free};

	Protocol:
		state=busy:{show_busy};
		state=free:{show_free};
		Other: {none};
    end Protocol

	Evolution:
		state=busy if train_on_block=true;
		state=free if train_on_block=false;
    end Evolution

end Agent

Agent Block2
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{busy,free};
    	train_on_block:boolean;
    end Vars
    Actions = {none,show_busy,show_free};

	Protocol:
		state=busy:{show_busy};
		state=free:{show_free};
		Other: {none};
    end Protocol

	Evolution:
		state=busy if train_on_block=true;
		state=free if train_on_block=false;
    end Evolution

end Agent

Evaluation
  Tran_go_pass_station  if Environment.Signal_state= Green and Environment.Operation_Order=Going_to_line3;
  Tran_stop_at_station  if Environment.Signal_state= Green and Environment.Operation_Order=Going_to_line1;
  Keeping_state         if Turn_out.lock_state=locked;
  Emergency_stop        if Environment.Signal_state= Red;
  Sensor1_true          if Sensor1.value=true;
  Sensor2_true          if Sensor2.value=true;
  Sensor3_true          if Sensor3.value=true;
  Sensor4_true          if Sensor4.value=true;
  Sensor5_true          if Sensor5.value=true;
  Sensor6_true          if Sensor6.value=true;
  Sensor7_true          if Sensor7.value=true;
  Sensor8_true          if Sensor8.value=true;
  Sensor9_true          if Sensor9.value=true;
  Sensor10_true          if Sensor10.value=true;
   Sensor11_true          if Sensor11.value=true;
    Sensor12_true          if Sensor12.value=true;
    Sensor13_true          if Sensor13.value=true;
    Sensor14_true          if Sensor14.value=true;
    Sensor15_true          if Sensor15.value=true;
    Sensor16_true          if Sensor16.value=true;
    Sensor17_true          if Sensor17.value=true;
    Sensor18_true          if Sensor18.value=true;
    Sensor19_true          if Sensor19.value=true;
    Sensor20_true          if Sensor20.value=true;



  Sensor1_false         if Sensor1.value=false;
  Sensor2_false         if Sensor2.value=false;
  Sensor3_false         if Sensor3.value=false;
  Sensor4_false         if Sensor4.value=false;
  Sensor5_false         if Sensor5.value=false;
  Sensor6_false         if Sensor6.value=false;
  Sensor7_false         if Sensor7.value=false;
  Sensor8_false         if Sensor8.value=false;
  Sensor9_false         if Sensor9.value=false;
  Sensor10_false         if Sensor10.value=false;
 Sensor11_false         if Sensor11.value=false;
  Sensor12_false         if Sensor12.value=false;
  Sensor13_false         if Sensor13.value=false;
  Sensor14_false         if Sensor14.value=false;
  Sensor15_false         if Sensor15.value=false;
  Sensor16_false         if Sensor16.value=false;
  Sensor17_false         if Sensor17.value=false;
  Sensor18_false         if Sensor18.value=false;
  Sensor19_false         if Sensor19.value=false;
  Sensor20_false         if Sensor20.value=false;

end Evaluation

-- Operation_now          if Environment.Operation_Order=Going_to_line3 or Environment.Operation_Order=Going_to_line1;
InitStates
	((Turn_out.state = normal) and (Environment.Operation_Order = Going_to_line1) and (Sensor1.value = true) and (Sensor2.value = true) and (Sensor3.value = true) and (Sensor4.value = true)
	and (Sensor5.value = true) and (Sensor6.value = true) and (Sensor7.value = true) and (Sensor8.value = true) and (Sensor9.value = true) and (Sensor10.value = true)
    and  (Sensor11.value = true) and (Sensor12.value = true) and (Sensor13.value = true) and (Sensor14.value = true)
        	and (Sensor15.value = true) and (Sensor16.value = true) and (Sensor17.value = true) and (Sensor18.value = true) and (Sensor19.value = true) and (Sensor20.value = true)
	) or
	((Turn_out.state = reverse) and (Environment.Operation_Order = Going_to_line3) and (Sensor1.value = false) and (Sensor2.value = false) and (Sensor3.value = false) and (Sensor4.value = false)
	and (Sensor5.value = false) and (Sensor6.value = false) and (Sensor7.value = false) and (Sensor8.value = false)
	and (Sensor9.value = false) and (Sensor10.value = false)
and (Sensor11.value = false) and (Sensor12.value = false) and (Sensor13.value = false) and (Sensor14.value = false)
    	and (Sensor15.value = false) and (Sensor16.value = false) and (Sensor17.value = false) and (Sensor18.value = false)
    	and (Sensor19.value = false) and (Sensor20.value = false)
	)
	 and (Environment.Signal_state = Red);
end InitStates

Formulae
	--AG Emergency_stop;
	--AG EX Emergency_stop;
	AG (EX(Sensor1_true) and EX(Sensor2_true) and EX(Sensor3_true) and EX(Sensor4_true) and EX(Sensor5_true) and EX(Sensor6_true) and EX(Sensor7_true)
	and EX(Sensor8_true) and EX(Sensor9_true) and EX(Sensor10_true)
   and EX(Sensor11_true) and EX(Sensor12_true) and EX(Sensor13_true) and EX(Sensor14_true) and EX(Sensor15_true) and EX(Sensor16_true) and EX(Sensor17_true)
       	and EX(Sensor18_true) and EX(Sensor19_true) and EX(Sensor20_true)
	)

	or (EX(Sensor1_false) and EX(Sensor2_false) and EX(Sensor3_false) and EX(Sensor4_false) and EX(Sensor5_false) and EX(Sensor6_false) and EX(Sensor7_false)
	and EX(Sensor8_false) and EX(Sensor9_false) and EX(Sensor10_false)
and EX(Sensor11_false) and EX(Sensor12_false) and EX(Sensor13_false) and EX(Sensor14_false) and EX(Sensor15_false) and EX(Sensor16_false) and EX(Sensor17_false)
    	and EX(Sensor18_false) and EX(Sensor19_false) and EX(Sensor20_false)
	);
	--AG (Operation_now) -> ((Sensor1_true and EX(Sensor1_true) ) or (Sensor2_true and EX(Sensor2_true))); -- is false
	AG (Keeping_state) -> ((Sensor1_true and EX(Sensor1_true) ) and (Sensor2_true and EX(Sensor2_true)) and (Sensor3_true and EX(Sensor3_true)) and (Sensor4_true and EX(Sensor4_true))
	and (Sensor5_true and EX(Sensor5_true)) and (Sensor6_true and EX(Sensor6_true)) and (Sensor7_true and EX(Sensor7_true))
	and (Sensor8_true and EX(Sensor8_true)) and (Sensor9_true and EX(Sensor9_true)) and (Sensor10_true and EX(Sensor10_true))
	and (Sensor11_true and EX(Sensor11_true) ) and (Sensor12_true and EX(Sensor12_true)) and (Sensor13_true and EX(Sensor13_true)) and (Sensor14_true and EX(Sensor14_true))
       	and (Sensor15_true and EX(Sensor15_true)) and (Sensor16_true and EX(Sensor16_true)) and (Sensor17_true and EX(Sensor17_true))
       	and (Sensor18_true and EX(Sensor18_true)) and (Sensor19_true and EX(Sensor19_true)) and (Sensor20_true and EX(Sensor20_true))
       	);
end Formulae
