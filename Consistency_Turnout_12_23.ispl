Agent Environment
  Obsvars:
   Operation_Order: {none,Going_to_line1,Going_to_line3};
  end Obsvars
    --  	Block_State:{Busy,Free};
   Vars:
    	Signal_state: {Green,Red};-- The states of the light for the moving train
        Operation_state:{Operating,Operate_end};--	Operation_Order: {Going_to_line1,Going_to_line3};
   end Vars
    
    Actions = {none,keep_going,stop,operation_end};
    Protocol:
    	(Signal_state=Green): {keep_going};  
    	(Signal_state=Red): {stop};  
    	(Operation_state=Operate_end):{operation_end};        
    	Other: {none};
    end Protocol
    
    Evolution:
    	Signal_state= Green if (Operation_Order=Going_to_line3) and (Block2.Action=show_free) and
    	            (Sensor1.Action=show_normal and Sensor2.Action=show_normal Sensor3.Action=show_normal Sensor4.Action=show_normal);
    	Signal_state= Green if (Operation_Order=Going_to_line1) and (Block1.Action=show_free) and
    	       (Sensor1.Action=show_reverse or Sensor2.Action=show_reverse or Sensor3.Action=show_reverse or Sensor4.Action=show_reverse);
    	Signal_state= Red if (Operation_Order=Going_to_line1) and 
    	             (Sensor1.Action=show_normal or Sensor2.Action=show_normal or Sensor3.Action=show_normal or Sensor4.Action=show_normal or Block1.Action=show_busy);
    	Signal_state= Red if (Operation_Order=Going_to_line3) and 
    	             (Sensor1.Action=show_reverse or Sensor2.Action=show_reverse or Sensor3.Action=show_reverse or Sensor4.Action=show_reverse or Block2.Action=show_busy);
    	Signal_state=Red if Operation_Order=none or Action=none;
    	Operation_state=Operating if Action=keep_going;
    	Operation_state=Operate_end if Operation_state=Operating;	
    end Evolution

end Agent

Agent Turn_out
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{normal,reverse};
    	lock_state:{locked,unlocked};
    end Vars
    Actions = {none,positive_rotation,reverse_rotation};-- The orders for switch machine ;

	Protocol:
    	(state=reverse and Environment.Operation_Order=Going_to_line3): {positive_rotation};
		(state=normal and Environment.Operation_Order=Going_to_line1): {reverse_rotation};
		Other: {none};
    end Protocol

	Evolution:
		lock_state=locked if Action=positive_rotation or Action=reverse_rotation;
		lock_state=locked if Environment.Action=keep_going;
		lock_state=unlocked if Environment.Action=operation_end;
		state=reverse if state=reverse and Action=none;
		state=reverse if Action=reverse_rotation;
		state=reverse if state=reverse and lock_state=locked;
		state=normal if state=normal and Action=none;
		state=normal if state=normal and lock_state=locked;
		state=normal if Action=positive_rotation;
		
    end Evolution	
		
end Agent



Agent Sensor1
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor2
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor3
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor4
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Block1
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{busy,free};
    	train_on_block:boolean;
    end Vars
    Actions = {none,show_busy,show_free};

	Protocol:
		state=busy:{show_busy};
		state=free:{show_free};
		Other: {none};
    end Protocol

	Evolution:
		state=busy if train_on_block=true;
		state=free if train_on_block=false;		
    end Evolution	
		
end Agent

Agent Block2
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{busy,free};
    	train_on_block:boolean;
    end Vars
    Actions = {none,show_busy,show_free};

	Protocol:
		state=busy:{show_busy};
		state=free:{show_free};
		Other: {none};
    end Protocol

	Evolution:
		state=busy if train_on_block=true;
		state=free if train_on_block=false;		
    end Evolution	
		
end Agent

Evaluation
  Tran_go_pass_station  if Environment.Signal_state= Green and Environment.Operation_Order=Going_to_line3;
  Tran_stop_at_station  if Environment.Signal_state= Green and Environment.Operation_Order=Going_to_line1;
  Keeping_state         if Turn_out.lock_state=locked;
  Emergency_stop        if Environment.Signal_state= Red;
  Sensor1_true          if Sensor1.value=true;
  Sensor2_true          if Sensor2.value=true;
  Sensor3_true          if Sensor3.value=true;
  Sensor4_true          if Sensor4.value=true;

  Sensor1_false         if Sensor1.value=false;
  Sensor2_false         if Sensor2.value=false;
  Sensor3_false         if Sensor3.value=false;
  Sensor4_false         if Sensor4.value=false;

end Evaluation

-- Operation_now          if Environment.Operation_Order=Going_to_line3 or Environment.Operation_Order=Going_to_line1;
InitStates
	((Turn_out.state = normal) and (Environment.Operation_Order = Going_to_line1) and (Sensor1.value = true) and (Sensor2.value = true) and (Sensor3.value = true) and (Sensor4.value = true)) or
	((Turn_out.state = reverse) and (Environment.Operation_Order = Going_to_line3) and (Sensor1.value = false) and (Sensor2.value = false) and (Sensor3.value = false) and (Sensor4.value = false))
	 and (Environment.Signal_state = Red);
end InitStates

Formulae
	--AG Emergency_stop;
	--AG EX Emergency_stop;
	AG (EX(Sensor1_true) and EX(Sensor2_true) and EX(Sensor3_true) and EX(Sensor4_true)) or (EX(Sensor1_false) and EX(Sensor2_false) and and EX(Sensor3_false) and and EX(Sensor4_false));
	--AG (Operation_now) -> ((Sensor1_true and EX(Sensor1_true) ) or (Sensor2_true and EX(Sensor2_true))); -- is false
	AG (Keeping_state) -> ((Sensor1_true and EX(Sensor1_true) ) or (Sensor2_true and EX(Sensor2_true)) or (Sensor3_true and EX(Sensor3_true)) or (Sensor4_true and EX(Sensor4_true)));
end Formulae
