Agent Environment
  Obsvars:
   Operation_Order: {none,Going_to_line1,Going_to_line3};
  end Obsvars
    --  	Block_State:{Busy,Free};
   Vars:
    	Signal_state: {Green,Red};-- The states of the light for the moving train
        Operation_state:{Operating,Operate_end};--	Operation_Order: {Going_to_line1,Going_to_line3};
   end Vars
    
    Actions = {none,keep_going,stop,operation_end};
    Protocol:
    	(Signal_state=Green): {keep_going};  
    	(Signal_state=Red): {stop};  
    	(Operation_state=Operate_end):{operation_end};        
    	Other: {none};
    end Protocol
    
    Evolution:
    	Signal_state= Green if (Operation_Order=Going_to_line1) and (Block1.Action=show_free) and
    	            (Sensor1.Action=show_normal and Sensor2.Action=show_normal and Sensor3.Action=show_normal and Sensor4.Action=show_normal
    	            and Sensor5.Action=show_normal and Sensor6.Action=show_normal and Sensor7.Action=show_normal
    	            and Sensor8.Action=show_normal and Sensor9.Action=show_normal and Sensor10.Action=show_normal
    	            and Sensor11.Action=show_normal and Sensor12.Action=show_normal and Sensor13.Action=show_normal and Sensor14.Action=show_normal
                            	            and Sensor15.Action=show_normal and Sensor16.Action=show_normal and Sensor17.Action=show_normal
                            	            and Sensor18.Action=show_normal and Sensor19.Action=show_normal and Sensor20.Action=show_normal
                            	           and Sensor21.Action=show_normal and Sensor22.Action=show_normal and Sensor23.Action=show_normal and Sensor24.Action=show_normal
                                                	            and Sensor25.Action=show_normal and Sensor26.Action=show_normal and Sensor27.Action=show_normal
                                                	            and Sensor28.Action=show_normal and Sensor29.Action=show_normal and Sensor30.Action=show_normal
                                                	            and Sensor31.Action=show_normal and Sensor32.Action=show_normal and Sensor33.Action=show_normal and Sensor34.Action=show_normal
                                                                        	            and Sensor35.Action=show_normal and Sensor36.Action=show_normal and Sensor37.Action=show_normal
                                                                        	            and Sensor38.Action=show_normal and Sensor39.Action=show_normal and Sensor40.Action=show_normal);

    	Signal_state= Green if (Operation_Order=Going_to_line3) and (Block3.Action=show_free) and
    	       (Sensor1.Action=show_reverse and Sensor2.Action=show_reverse and Sensor3.Action=show_reverse and Sensor4.Action=show_reverse
    	       and Sensor5.Action=show_reverse and Sensor6.Action=show_reverse and Sensor7.Action=show_reverse
    	       and Sensor8.Action=show_reverse and Sensor9.Action=show_reverse and Sensor10.Action=show_reverse
    	      and Sensor11.Action=show_reverse and Sensor12.Action=show_reverse and Sensor13.Action=show_reverse and Sensor14.Action=show_reverse
                     	       and Sensor15.Action=show_reverse and Sensor16.Action=show_reverse and Sensor17.Action=show_reverse
                     	       and Sensor18.Action=show_reverse and Sensor19.Action=show_reverse and Sensor20.Action=show_reverse
    	and Sensor21.Action=show_reverse and Sensor22.Action=show_reverse and Sensor23.Action=show_reverse and Sensor24.Action=show_reverse
            	       and Sensor25.Action=show_reverse and Sensor26.Action=show_reverse and Sensor27.Action=show_reverse
            	       and Sensor28.Action=show_reverse and Sensor29.Action=show_reverse and Sensor30.Action=show_reverse
            	      and Sensor31.Action=show_reverse and Sensor32.Action=show_reverse and Sensor33.Action=show_reverse and Sensor34.Action=show_reverse
                                    	       and Sensor35.Action=show_reverse and Sensor36.Action=show_reverse and Sensor37.Action=show_reverse
                                    	       and Sensor38.Action=show_reverse and Sensor39.Action=show_reverse and Sensor40.Action=show_reverse
    	       );
    	Signal_state= Red if (Operation_Order=Going_to_line3) and
    	             (Sensor1.Action=show_normal or Sensor2.Action=show_normal or Sensor3.Action=show_normal or Sensor4.Action=show_normal
    	             or Sensor5.Action=show_normal or Sensor6.Action=show_normal or Sensor7.Action=show_normal
    	             or Sensor8.Action=show_normal or Sensor9.Action=show_normal or Sensor10.Action=show_normal
    	           or Sensor11.Action=show_normal or Sensor12.Action=show_normal or Sensor13.Action=show_normal or Sensor14.Action=show_normal
                          	             or Sensor15.Action=show_normal or Sensor16.Action=show_normal or Sensor17.Action=show_normal
                          	             or Sensor18.Action=show_normal or Sensor19.Action=show_normal or Sensor20.Action=show_normal
    	           or Sensor21.Action=show_normal or Sensor22.Action=show_normal or Sensor23.Action=show_normal or Sensor24.Action=show_normal
                          	             or Sensor25.Action=show_normal or Sensor26.Action=show_normal or Sensor27.Action=show_normal
                          	             or Sensor28.Action=show_normal or Sensor29.Action=show_normal or Sensor30.Action=show_normal
                   or Sensor31.Action=show_normal or Sensor32.Action=show_normal or Sensor33.Action=show_normal or Sensor34.Action=show_normal
                          	             or Sensor35.Action=show_normal or Sensor36.Action=show_normal or Sensor37.Action=show_normal
                          	             or Sensor38.Action=show_normal or Sensor39.Action=show_normal or Sensor40.Action=show_normal
    	             or Block3.Action=show_busy);
    	Signal_state= Red if (Operation_Order=Going_to_line1) and
    	             (Sensor1.Action=show_reverse or Sensor2.Action=show_reverse or Sensor3.Action=show_reverse or Sensor4.Action=show_reverse
    	             or Sensor5.Action=show_reverse or Sensor6.Action=show_reverse or Sensor7.Action=show_reverse
    	             or Sensor8.Action=show_reverse or Sensor9.Action=show_reverse or Sensor10.Action=show_reverse
    	            or Sensor11.Action=show_reverse or Sensor12.Action=show_reverse or Sensor13.Action=show_reverse or Sensor14.Action=show_reverse
                           	             or Sensor15.Action=show_reverse or Sensor16.Action=show_reverse or Sensor17.Action=show_reverse
                           	             or Sensor18.Action=show_reverse or Sensor19.Action=show_reverse or Sensor20.Action=show_reverse
    	             or Sensor21.Action=show_reverse or Sensor22.Action=show_reverse or Sensor23.Action=show_reverse or Sensor24.Action=show_reverse
                            	             or Sensor25.Action=show_reverse or Sensor26.Action=show_reverse or Sensor27.Action=show_reverse
                            	             or Sensor28.Action=show_reverse or Sensor29.Action=show_reverse or Sensor30.Action=show_reverse
                            	            or Sensor31.Action=show_reverse or Sensor32.Action=show_reverse or Sensor33.Action=show_reverse or Sensor34.Action=show_reverse
                                                   	             or Sensor35.Action=show_reverse or Sensor36.Action=show_reverse or Sensor37.Action=show_reverse
                                                   	             or Sensor38.Action=show_reverse or Sensor39.Action=show_reverse or Sensor40.Action=show_reverse
                                                   	            or Block1.Action=show_busy);

    	Signal_state=Red if Operation_Order=none or Action=none;
    	Operation_state=Operating if Action=keep_going;
    	Operation_state=Operate_end if Operation_state=Operating;
    end Evolution

end Agent

Agent Turn_out
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{normal,reverse};
    	lock_state:{locked,unlocked};
    end Vars
    Actions = {none,positive_rotation,reverse_rotation};-- The orders for switch machine ;

	Protocol:
    	(state=reverse and Environment.Operation_Order=Going_to_line3): {positive_rotation};
		(state=normal and Environment.Operation_Order=Going_to_line1): {reverse_rotation};
		Other: {none};
    end Protocol

	Evolution:
		lock_state=locked if Action=positive_rotation or Action=reverse_rotation;
		lock_state=locked if Environment.Action=keep_going;
		lock_state=unlocked if Environment.Action=operation_end;
		state=reverse if state=reverse and Action=none;
		state=reverse if Action=reverse_rotation;
		state=reverse if state=reverse and lock_state=locked;
		state=normal if state=normal and Action=none;
		state=normal if state=normal and lock_state=locked;
		state=normal if Action=positive_rotation;

    end Evolution

end Agent



Agent Sensor1
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor2
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor3
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor4
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor5
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor6
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor7
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor8
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor9
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor10
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor11
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor12
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor13
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor14
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor15
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor16
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor17
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor18
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor19
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor20
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor21
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor22
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor23
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor24
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor25
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor26
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor27
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor28
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor29
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor30
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor31
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor32
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor33
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor34
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor35
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor36
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor37
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor38
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor39
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Sensor40
  Vars:
    value: boolean;
  end Vars
  Actions = {none,show_normal,show_reverse};

	Protocol:
		value=true:{show_normal};
		value=false:{show_reverse};
    	Other : {none};
    end Protocol

    Evolution:
		value=true  if Turn_out.Action=positive_rotation;
		value=false if Turn_out.Action=reverse_rotation;
    	value=true  if value=true;
    	value=false if value=false;
    end Evolution

end Agent

Agent Block1
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{busy,free};
    	train_on_block:boolean;
    end Vars
    Actions = {none,show_busy,show_free};

	Protocol:
		state=busy:{show_busy};
		state=free:{show_free};
		Other: {none};
    end Protocol

	Evolution:
		state=busy if train_on_block=true;
		state=free if train_on_block=false;
    end Evolution

end Agent

Agent Block3
    --Lobsvars = {Operation_Order};
    Vars:
    	state:{busy,free};
    	train_on_block:boolean;
    end Vars
    Actions = {none,show_busy,show_free};

	Protocol:
		state=busy:{show_busy};
		state=free:{show_free};
		Other: {none};
    end Protocol

	Evolution:
		state=busy if train_on_block=true;
		state=free if train_on_block=false;
    end Evolution

end Agent

Evaluation
  Tran_go_pass_station  if Environment.Signal_state= Green and Environment.Operation_Order=Going_to_line3;
  Tran_stop_at_station  if Environment.Signal_state= Green and Environment.Operation_Order=Going_to_line1;
  Keeping_state         if Turn_out.lock_state=locked;
  Emergency_stop        if Environment.Signal_state= Red;
  Sensor1_true          if Sensor1.value=true;
  Sensor2_true          if Sensor2.value=true;
  Sensor3_true          if Sensor3.value=true;
  Sensor4_true          if Sensor4.value=true;
  Sensor5_true          if Sensor5.value=true;
  Sensor6_true          if Sensor6.value=true;
  Sensor7_true          if Sensor7.value=true;
  Sensor8_true          if Sensor8.value=true;
  Sensor9_true          if Sensor9.value=true;
  Sensor10_true          if Sensor10.value=true;
   Sensor11_true          if Sensor11.value=true;
    Sensor12_true          if Sensor12.value=true;
    Sensor13_true          if Sensor13.value=true;
    Sensor14_true          if Sensor14.value=true;
    Sensor15_true          if Sensor15.value=true;
    Sensor16_true          if Sensor16.value=true;
    Sensor17_true          if Sensor17.value=true;
    Sensor18_true          if Sensor18.value=true;
    Sensor19_true          if Sensor19.value=true;
    Sensor20_true          if Sensor20.value=true;
  Sensor21_true          if Sensor21.value=true;
  Sensor22_true          if Sensor22.value=true;
  Sensor23_true          if Sensor23.value=true;
  Sensor24_true          if Sensor24.value=true;
  Sensor25_true          if Sensor25.value=true;
  Sensor26_true          if Sensor26.value=true;
  Sensor27_true          if Sensor27.value=true;
  Sensor28_true          if Sensor28.value=true;
  Sensor29_true          if Sensor29.value=true;
  Sensor30_true          if Sensor30.value=true;
  Sensor31_true          if Sensor31.value=true;
  Sensor32_true          if Sensor32.value=true;
  Sensor33_true          if Sensor33.value=true;
  Sensor34_true          if Sensor34.value=true;
  Sensor35_true          if Sensor35.value=true;
  Sensor36_true          if Sensor36.value=true;
  Sensor37_true          if Sensor37.value=true;
  Sensor38_true          if Sensor38.value=true;
  Sensor39_true          if Sensor39.value=true;
  Sensor40_true          if Sensor40.value=true;

  Sensor1_false         if Sensor1.value=false;
  Sensor2_false         if Sensor2.value=false;
  Sensor3_false         if Sensor3.value=false;
  Sensor4_false         if Sensor4.value=false;
  Sensor5_false         if Sensor5.value=false;
  Sensor6_false         if Sensor6.value=false;
  Sensor7_false         if Sensor7.value=false;
  Sensor8_false         if Sensor8.value=false;
  Sensor9_false         if Sensor9.value=false;
  Sensor10_false         if Sensor10.value=false;
 Sensor11_false         if Sensor11.value=false;
  Sensor12_false         if Sensor12.value=false;
  Sensor13_false         if Sensor13.value=false;
  Sensor14_false         if Sensor14.value=false;
  Sensor15_false         if Sensor15.value=false;
  Sensor16_false         if Sensor16.value=false;
  Sensor17_false         if Sensor17.value=false;
  Sensor18_false         if Sensor18.value=false;
  Sensor19_false         if Sensor19.value=false;
  Sensor20_false         if Sensor20.value=false;
  Sensor21_false         if Sensor21.value=false;
  Sensor22_false         if Sensor22.value=false;
  Sensor23_false         if Sensor23.value=false;
  Sensor24_false         if Sensor24.value=false;
  Sensor25_false         if Sensor25.value=false;
  Sensor26_false         if Sensor26.value=false;
  Sensor27_false         if Sensor27.value=false;
  Sensor28_false         if Sensor28.value=false;
  Sensor29_false         if Sensor29.value=false;
  Sensor30_false         if Sensor30.value=false;
    Sensor31_false         if Sensor31.value=false;
    Sensor32_false         if Sensor32.value=false;
    Sensor33_false         if Sensor33.value=false;
    Sensor34_false         if Sensor34.value=false;
    Sensor35_false         if Sensor35.value=false;
    Sensor36_false         if Sensor36.value=false;
    Sensor37_false         if Sensor37.value=false;
    Sensor38_false         if Sensor38.value=false;
    Sensor39_false         if Sensor39.value=false;
    Sensor40_false         if Sensor40.value=false;
end Evaluation

-- Operation_now          if Environment.Operation_Order=Going_to_line3 or Environment.Operation_Order=Going_to_line1;
InitStates
	((Turn_out.state = normal) and (Environment.Operation_Order = Going_to_line3) and (Sensor1.value = true) and (Sensor2.value = true) and (Sensor3.value = true) and (Sensor4.value = true)
	and (Sensor5.value = true) and (Sensor6.value = true) and (Sensor7.value = true) and (Sensor8.value = true) and (Sensor9.value = true) and (Sensor10.value = true)
    and  (Sensor11.value = true) and (Sensor12.value = true) and (Sensor13.value = true) and (Sensor14.value = true)
        	and (Sensor15.value = true) and (Sensor16.value = true) and (Sensor17.value = true) and (Sensor18.value = true) and (Sensor19.value = true) and (Sensor20.value = true)
	and (Sensor21.value = true) and (Sensor22.value = true) and (Sensor23.value = true) and (Sensor24.value = true)
    	and (Sensor25.value = true) and (Sensor26.value = true) and (Sensor27.value = true) and (Sensor28.value = true) and (Sensor29.value = true) and (Sensor30.value = true)
      and (Sensor31.value = true) and (Sensor32.value = true) and (Sensor33.value = true) and (Sensor34.value = true)
      	and (Sensor35.value = true) and (Sensor36.value = true) and (Sensor37.value = true) and (Sensor38.value = true) and (Sensor39.value = true) and (Sensor40.value = true)

        ) or
	((Turn_out.state = reverse) and (Environment.Operation_Order = Going_to_line1) and (Sensor1.value = false) and (Sensor2.value = false) and (Sensor3.value = false) and (Sensor4.value = false)
	and (Sensor5.value = false) and (Sensor6.value = false) and (Sensor7.value = false) and (Sensor8.value = false)
	and (Sensor9.value = false) and (Sensor10.value = false)
and (Sensor11.value = false) and (Sensor12.value = false) and (Sensor13.value = false) and (Sensor14.value = false)
    	and (Sensor15.value = false) and (Sensor16.value = false) and (Sensor17.value = false) and (Sensor18.value = false)
    	and (Sensor19.value = false) and (Sensor20.value = false)
   and (Sensor21.value = false) and (Sensor22.value = false) and (Sensor23.value = false) and (Sensor24.value = false)
   	and (Sensor25.value = false) and (Sensor26.value = false) and (Sensor27.value = false) and (Sensor28.value = false)
   	and (Sensor29.value = false) and (Sensor30.value = false)
   	and (Sensor31.value = false) and (Sensor32.value = false) and (Sensor33.value = false) and (Sensor34.value = false)
    	and (Sensor35.value = false) and (Sensor36.value = false) and (Sensor37.value = false) and (Sensor38.value = false)
    	and (Sensor39.value = false) and (Sensor40.value = false)
	)
	 and (Environment.Signal_state = Red);
end InitStates

Formulae
	--AG Emergency_stop;
	--AG EX Emergency_stop;
	AG (EX(Sensor1_true) and EX(Sensor2_true) and EX(Sensor3_true) and EX(Sensor4_true) and EX(Sensor5_true) and EX(Sensor6_true) and EX(Sensor7_true)
	and EX(Sensor8_true) and EX(Sensor9_true) and EX(Sensor10_true)
   and EX(Sensor11_true) and EX(Sensor12_true) and EX(Sensor13_true) and EX(Sensor14_true) and EX(Sensor15_true) and EX(Sensor16_true) and EX(Sensor17_true)
       	and EX(Sensor18_true) and EX(Sensor19_true) and EX(Sensor20_true)
	and EX(Sensor21_true) and EX(Sensor22_true) and EX(Sensor23_true) and EX(Sensor24_true) and EX(Sensor25_true) and EX(Sensor26_true) and EX(Sensor27_true)
        	and EX(Sensor28_true) and EX(Sensor29_true) and EX(Sensor30_true)
     and EX(Sensor31_true) and EX(Sensor32_true) and EX(Sensor33_true) and EX(Sensor34_true) and EX(Sensor35_true) and EX(Sensor36_true) and EX(Sensor37_true)
         	and EX(Sensor38_true) and EX(Sensor39_true) and EX(Sensor40_true)
	)

	or (EX(Sensor1_false) and EX(Sensor2_false) and EX(Sensor3_false) and EX(Sensor4_false) and EX(Sensor5_false) and EX(Sensor6_false) and EX(Sensor7_false)
	and EX(Sensor8_false) and EX(Sensor9_false) and EX(Sensor10_false)
and EX(Sensor11_false) and EX(Sensor12_false) and EX(Sensor13_false) and EX(Sensor14_false) and EX(Sensor15_false) and EX(Sensor16_false) and EX(Sensor17_false)
    	and EX(Sensor18_false) and EX(Sensor19_false) and EX(Sensor20_false)
and EX(Sensor21_false) and EX(Sensor22_false) and EX(Sensor23_false) and EX(Sensor24_false) and EX(Sensor25_false) and EX(Sensor26_false) and EX(Sensor27_false)
    	and EX(Sensor28_false) and EX(Sensor29_false) and EX(Sensor30_false)
   and EX(Sensor31_false) and EX(Sensor32_false) and EX(Sensor33_false) and EX(Sensor34_false) and EX(Sensor35_false) and EX(Sensor36_false) and EX(Sensor37_false)
       	and EX(Sensor38_false) and EX(Sensor39_false) and EX(Sensor40_false)
	);
	--AG (Operation_now) -> ((Sensor1_true and EX(Sensor1_true) ) or (Sensor2_true and EX(Sensor2_true))); -- is false
	AG (Keeping_state) -> ((Sensor1_true and EX(Sensor1_true) ) and (Sensor2_true and EX(Sensor2_true)) and (Sensor3_true and EX(Sensor3_true)) and (Sensor4_true and EX(Sensor4_true))
	and (Sensor5_true and EX(Sensor5_true)) and (Sensor6_true and EX(Sensor6_true)) and (Sensor7_true and EX(Sensor7_true))
	and (Sensor8_true and EX(Sensor8_true)) and (Sensor9_true and EX(Sensor9_true)) and (Sensor10_true and EX(Sensor10_true))
	and (Sensor11_true and EX(Sensor11_true) ) and (Sensor12_true and EX(Sensor12_true)) and (Sensor13_true and EX(Sensor13_true)) and (Sensor14_true and EX(Sensor14_true))
       	and (Sensor15_true and EX(Sensor15_true)) and (Sensor16_true and EX(Sensor16_true)) and (Sensor17_true and EX(Sensor17_true))
       	and (Sensor18_true and EX(Sensor18_true)) and (Sensor19_true and EX(Sensor19_true)) and (Sensor20_true and EX(Sensor20_true))
   and (Sensor21_true and EX(Sensor21_true) ) and (Sensor22_true and EX(Sensor22_true)) and (Sensor23_true and EX(Sensor23_true)) and (Sensor24_true and EX(Sensor24_true))
       	and (Sensor25_true and EX(Sensor25_true)) and (Sensor26_true and EX(Sensor26_true)) and (Sensor27_true and EX(Sensor27_true))
       	and (Sensor28_true and EX(Sensor28_true)) and (Sensor29_true and EX(Sensor29_true)) and (Sensor30_true and EX(Sensor30_true))
   and (Sensor31_true and EX(Sensor31_true) ) and (Sensor32_true and EX(Sensor32_true)) and (Sensor33_true and EX(Sensor33_true)) and (Sensor34_true and EX(Sensor34_true))
       	and (Sensor35_true and EX(Sensor35_true)) and (Sensor36_true and EX(Sensor36_true)) and (Sensor37_true and EX(Sensor37_true))
       	and (Sensor38_true and EX(Sensor38_true)) and (Sensor39_true and EX(Sensor39_true)) and (Sensor40_true and EX(Sensor40_true))
       	);
end Formulae
